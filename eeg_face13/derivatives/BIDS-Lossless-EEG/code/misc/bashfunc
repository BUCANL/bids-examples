DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
lockdir="$DIR/locks"

# Colours
B='\033[0;34m'
R='\033[0;31m'
G='\033[0;32m'
Y='\033[0;33m'
# No colour
NC='\033[0m'

function bold {
    printf "${B}$1${NC}"
}

function good {
    printf "${G}$1${NC}\n"
}

function error_msg {
    printf "${R}Error: ${NC}$1\n"
}
function test_lockset {
    mkdir -p "$lockdir"
    [ -f "$lockdir/$1.lock" ]
    return $?
}

function set_lockset {
    touch "$lockdir/$1.lock"
}

function checkset {
    if test_lockset $1 ; then
        printf "${Y}WARN:${NC}"
        cat <<HEAD
Lock $lockdir/$1.lock is set, skipping $1 section
if you think this is an error remove $lockdir/$1.lock and restart
HEAD
        return 1
    fi
    return 0
}

function test_dir_exit {
    if ! [ "$(ls -A "$1")" ] ; then
        printf "${R}Error:${NC}"
        cat <<HEAD
We expected the dir $1 to exist and have files.
$2
HEAD
        exit 1
    fi
}

function test_dir_warn {
    if ! [ "$(ls -A "$1")" ] ; then
        print "${Y}Warn:${NC}"
        cat <<HEAD
We expected the dir $1 to exist and have files.
$2
HEAD
    fi
}

function test_octave_pkg {
    octave --eval "`cat <<HEAD
try
  pkg load $1
catch
  exit(1)
end
[msg] = lastwarn;
if msg
  exit(1)
end
HEAD
`" > /dev/null 2>&1
    isinstalled=$?
    if [ 0 -eq "$isinstalled" ] ; then
        echo "$1 is installed"
        return 0
    fi
    bold "INFO:" ; echo "$1 is not available, attempting to install it"
    bold "INFO:" ; echo "This will take some time, please wait patiently"
    cd "../dependencies/Octave_pkg"
    
    octave --eval "`cat <<HEAD
try
    pkg install $2
catch
    exit(1)
end
[msg] = lasterror;
if msg
    exit(1)
end
HEAD
`" > /dev/null 2>&1
    wasinstalled=$?
    cd - 
    if [ "$wasinstalled" -eq 0 ] ; then
        bold "INFO:"; echo "$1 installed correctly"
        return 0
    else
        printf "${R}Error:${NC}"
        echo "$1 failed to install from `pwd`"
        exit 1
    fi
}
function test_which {
    if ! [ "$(which $1 2>/dev/null || true)" ] ; then
        printf "${R}Error:${NC}"
        cat <<HEAD
We expected program $1 to be present on the system.
$2
HEAD
        exit 1
    fi
}

function test_exec {
    if ! [ -e "$1" ] ; then
        error_msg "The file $1 doesn't exist, it cannot be executable"
        exit 1
    fi
    if [ -x "$1" ] ; then
        return 0
    fi
    bold "Info: " ; echo "Making the file $1 executable"
    chmod +x "$1"
}

function request_init {
    bold "Prompt:" >&2
    echo "We need to load session environment variables for" >&2
    echo "$1" >&2
    bold "Prompt:" >&2
    echo "Select a file containing environment variables" >&2
    bold "Note:" >&2
    echo "You may need to select a different version based on your scheduler" >&2
    filen=""
    while ! [ -f "$filen" ]; do
        read -e -p "File name: [../config/$1.sesinit]: " filen
        if [ -z "$filen" ] ; then
            filen="../config/$1.sesinit"
        fi
        if [ -f "$filen" ]; then
            echo "$filen"
            return
        fi
    done
}
